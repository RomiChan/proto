// Code generated by gen/option/main.go. DO NOT EDIT.

package proto

import "unsafe"

var boolOptionCodec = codec{
	size:   sizeOfBoolOption,
	encode: encodeBoolOption,
	decode: decodeBoolOption,
}

func sizeOfBoolOption(p unsafe.Pointer, f *structField) int {
	o := (*Option[bool])(p)
	if o.IsSome() {
		return sizeOfBoolRequired(o.unsafePointer(), f)
	}
	return 0
}

func encodeBoolOption(b []byte, p unsafe.Pointer, f *structField) []byte {
	o := (*Option[bool])(p)
	if o.IsSome() {
		return encodeBoolRequired(b, o.unsafePointer(), f)
	}
	return b
}

func decodeBoolOption(b []byte, p unsafe.Pointer) (int, error) {
	v := (*Option[bool])(p)
	v.some = true
	return decodeBool(b, v.unsafePointer())
}

var stringOptionCodec = codec{
	size:   sizeOfStringOption,
	encode: encodeStringOption,
	decode: decodeStringOption,
}

func sizeOfStringOption(p unsafe.Pointer, f *structField) int {
	o := (*Option[string])(p)
	if o.IsSome() {
		return sizeOfStringRequired(o.unsafePointer(), f)
	}
	return 0
}

func encodeStringOption(b []byte, p unsafe.Pointer, f *structField) []byte {
	o := (*Option[string])(p)
	if o.IsSome() {
		return encodeStringRequired(b, o.unsafePointer(), f)
	}
	return b
}

func decodeStringOption(b []byte, p unsafe.Pointer) (int, error) {
	v := (*Option[string])(p)
	v.some = true
	return decodeString(b, v.unsafePointer())
}

var int32OptionCodec = codec{
	size:   sizeOfInt32Option,
	encode: encodeInt32Option,
	decode: decodeInt32Option,
}

func sizeOfInt32Option(p unsafe.Pointer, f *structField) int {
	o := (*Option[int32])(p)
	if o.IsSome() {
		return sizeOfInt32Required(o.unsafePointer(), f)
	}
	return 0
}

func encodeInt32Option(b []byte, p unsafe.Pointer, f *structField) []byte {
	o := (*Option[int32])(p)
	if o.IsSome() {
		return encodeInt32Required(b, o.unsafePointer(), f)
	}
	return b
}

func decodeInt32Option(b []byte, p unsafe.Pointer) (int, error) {
	v := (*Option[int32])(p)
	v.some = true
	return decodeInt32(b, v.unsafePointer())
}

var uint32OptionCodec = codec{
	size:   sizeOfUint32Option,
	encode: encodeUint32Option,
	decode: decodeUint32Option,
}

func sizeOfUint32Option(p unsafe.Pointer, f *structField) int {
	o := (*Option[uint32])(p)
	if o.IsSome() {
		return sizeOfUint32Required(o.unsafePointer(), f)
	}
	return 0
}

func encodeUint32Option(b []byte, p unsafe.Pointer, f *structField) []byte {
	o := (*Option[uint32])(p)
	if o.IsSome() {
		return encodeUint32Required(b, o.unsafePointer(), f)
	}
	return b
}

func decodeUint32Option(b []byte, p unsafe.Pointer) (int, error) {
	v := (*Option[uint32])(p)
	v.some = true
	return decodeUint32(b, v.unsafePointer())
}

var int64OptionCodec = codec{
	size:   sizeOfInt64Option,
	encode: encodeInt64Option,
	decode: decodeInt64Option,
}

func sizeOfInt64Option(p unsafe.Pointer, f *structField) int {
	o := (*Option[int64])(p)
	if o.IsSome() {
		return sizeOfInt64Required(o.unsafePointer(), f)
	}
	return 0
}

func encodeInt64Option(b []byte, p unsafe.Pointer, f *structField) []byte {
	o := (*Option[int64])(p)
	if o.IsSome() {
		return encodeInt64Required(b, o.unsafePointer(), f)
	}
	return b
}

func decodeInt64Option(b []byte, p unsafe.Pointer) (int, error) {
	v := (*Option[int64])(p)
	v.some = true
	return decodeInt64(b, v.unsafePointer())
}

var uint64OptionCodec = codec{
	size:   sizeOfUint64Option,
	encode: encodeUint64Option,
	decode: decodeUint64Option,
}

func sizeOfUint64Option(p unsafe.Pointer, f *structField) int {
	o := (*Option[uint64])(p)
	if o.IsSome() {
		return sizeOfUint64Required(o.unsafePointer(), f)
	}
	return 0
}

func encodeUint64Option(b []byte, p unsafe.Pointer, f *structField) []byte {
	o := (*Option[uint64])(p)
	if o.IsSome() {
		return encodeUint64Required(b, o.unsafePointer(), f)
	}
	return b
}

func decodeUint64Option(b []byte, p unsafe.Pointer) (int, error) {
	v := (*Option[uint64])(p)
	v.some = true
	return decodeUint64(b, v.unsafePointer())
}

var zigzag32OptionCodec = codec{
	size:   sizeOfZigzag32Option,
	encode: encodeZigzag32Option,
	decode: decodeZigzag32Option,
}

func sizeOfZigzag32Option(p unsafe.Pointer, f *structField) int {
	o := (*Option[int32])(p)
	if o.IsSome() {
		return sizeOfZigzag32Required(o.unsafePointer(), f)
	}
	return 0
}

func encodeZigzag32Option(b []byte, p unsafe.Pointer, f *structField) []byte {
	o := (*Option[int32])(p)
	if o.IsSome() {
		return encodeZigzag32Required(b, o.unsafePointer(), f)
	}
	return b
}

func decodeZigzag32Option(b []byte, p unsafe.Pointer) (int, error) {
	v := (*Option[int32])(p)
	v.some = true
	return decodeZigzag32(b, v.unsafePointer())
}

var zigzag64OptionCodec = codec{
	size:   sizeOfZigzag64Option,
	encode: encodeZigzag64Option,
	decode: decodeZigzag64Option,
}

func sizeOfZigzag64Option(p unsafe.Pointer, f *structField) int {
	o := (*Option[int64])(p)
	if o.IsSome() {
		return sizeOfZigzag64Required(o.unsafePointer(), f)
	}
	return 0
}

func encodeZigzag64Option(b []byte, p unsafe.Pointer, f *structField) []byte {
	o := (*Option[int64])(p)
	if o.IsSome() {
		return encodeZigzag64Required(b, o.unsafePointer(), f)
	}
	return b
}

func decodeZigzag64Option(b []byte, p unsafe.Pointer) (int, error) {
	v := (*Option[int64])(p)
	v.some = true
	return decodeZigzag64(b, v.unsafePointer())
}

var fixed32OptionCodec = codec{
	size:   sizeOfFixed32Option,
	encode: encodeFixed32Option,
	decode: decodeFixed32Option,
}

func sizeOfFixed32Option(p unsafe.Pointer, f *structField) int {
	o := (*Option[uint32])(p)
	if o.IsSome() {
		return sizeOfFixed32Required(o.unsafePointer(), f)
	}
	return 0
}

func encodeFixed32Option(b []byte, p unsafe.Pointer, f *structField) []byte {
	o := (*Option[uint32])(p)
	if o.IsSome() {
		return encodeFixed32Required(b, o.unsafePointer(), f)
	}
	return b
}

func decodeFixed32Option(b []byte, p unsafe.Pointer) (int, error) {
	v := (*Option[uint32])(p)
	v.some = true
	return decodeFixed32(b, v.unsafePointer())
}

var fixed64OptionCodec = codec{
	size:   sizeOfFixed64Option,
	encode: encodeFixed64Option,
	decode: decodeFixed64Option,
}

func sizeOfFixed64Option(p unsafe.Pointer, f *structField) int {
	o := (*Option[uint64])(p)
	if o.IsSome() {
		return sizeOfFixed64Required(o.unsafePointer(), f)
	}
	return 0
}

func encodeFixed64Option(b []byte, p unsafe.Pointer, f *structField) []byte {
	o := (*Option[uint64])(p)
	if o.IsSome() {
		return encodeFixed64Required(b, o.unsafePointer(), f)
	}
	return b
}

func decodeFixed64Option(b []byte, p unsafe.Pointer) (int, error) {
	v := (*Option[uint64])(p)
	v.some = true
	return decodeFixed64(b, v.unsafePointer())
}

var float32OptionCodec = codec{
	size:   sizeOfFloat32Option,
	encode: encodeFloat32Option,
	decode: decodeFloat32Option,
}

func sizeOfFloat32Option(p unsafe.Pointer, f *structField) int {
	o := (*Option[float32])(p)
	if o.IsSome() {
		return sizeOfFloat32Required(o.unsafePointer(), f)
	}
	return 0
}

func encodeFloat32Option(b []byte, p unsafe.Pointer, f *structField) []byte {
	o := (*Option[float32])(p)
	if o.IsSome() {
		return encodeFloat32Required(b, o.unsafePointer(), f)
	}
	return b
}

func decodeFloat32Option(b []byte, p unsafe.Pointer) (int, error) {
	v := (*Option[float32])(p)
	v.some = true
	return decodeFloat32(b, v.unsafePointer())
}

var float64OptionCodec = codec{
	size:   sizeOfFloat64Option,
	encode: encodeFloat64Option,
	decode: decodeFloat64Option,
}

func sizeOfFloat64Option(p unsafe.Pointer, f *structField) int {
	o := (*Option[float64])(p)
	if o.IsSome() {
		return sizeOfFloat64Required(o.unsafePointer(), f)
	}
	return 0
}

func encodeFloat64Option(b []byte, p unsafe.Pointer, f *structField) []byte {
	o := (*Option[float64])(p)
	if o.IsSome() {
		return encodeFloat64Required(b, o.unsafePointer(), f)
	}
	return b
}

func decodeFloat64Option(b []byte, p unsafe.Pointer) (int, error) {
	v := (*Option[float64])(p)
	v.some = true
	return decodeFloat64(b, v.unsafePointer())
}
